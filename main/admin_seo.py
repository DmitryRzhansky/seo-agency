# main/admin_seo.py - –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–ª–∞—Å—Å—ã –¥–ª—è SEO

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.utils.translation import gettext_lazy as _
from .models import City, ServiceCategory, Service, TeamMember, Testimonial, ContactRequest, PortfolioItem, CustomHeadScript, HomePage, RegionalPostAdaptation, FAQCategory, FAQItem
from seo.admin import SEOAdminMixin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = _('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Isakov Agency')
admin.site.site_title = _('–ê–¥–º–∏–Ω–∫–∞')
admin.site.index_title = _('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º')

class CustomHeadScriptsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—à–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω–∫—É"""
    
    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        custom_scripts_fieldset = (
            'üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ head', {
                'fields': (),
                'description': self._get_custom_scripts_info(obj),
                'classes': ('collapse',),
            }
        )
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –≤ –Ω–∞—á–∞–ª–æ
        return (custom_scripts_fieldset,) + fieldsets
    
    def _get_custom_scripts_info(self, obj):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞"""
        if not obj:
            return "–°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ slug
        page_type = self._get_page_type(obj)
        page_slug = self._get_page_slug(obj)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        scripts = CustomHeadScript.objects.filter(is_active=True).order_by('order', 'name')
        relevant_scripts = []
        
        for script in scripts:
            if script.should_display_on_page(page_type, page_slug):
                relevant_scripts.append(script)
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        add_script_url = f"/admin/main/customheadscript/add/?page_type={page_type}&page_slug={page_slug or ''}"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        positions = {
            'very_early': [],
            'early': [],
            'middle': [],
            'late': [],
            'very_late': []
        }
        
        for script in relevant_scripts:
            positions[script.position].append(script)
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã head
        head_structure = self._create_head_structure_html(positions, page_type, page_slug, add_script_url)
        
        return head_structure
    
    def _create_head_structure_html(self, positions, page_type, page_slug, add_script_url):
        """–°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã head"""
        
        position_names = {
            'very_early': '–û—á–µ–Ω—å —Ä–∞–Ω–æ (–ø–æ—Å–ª–µ charset –∏ viewport)',
            'early': '–†–∞–Ω–æ (–ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö meta)',
            'middle': '–í —Å–µ—Ä–µ–¥–∏–Ω–µ (–ø–æ—Å–ª–µ SEO meta)',
            'late': '–ü–æ–∑–¥–Ω–æ (–ø–µ—Ä–µ–¥ CSS)',
            'very_late': '–û—á–µ–Ω—å –ø–æ–∑–¥–Ω–æ (–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º head)'
        }
        
        position_colors = {
            'very_early': '#e3f2fd',
            'early': '#f3e5f5',
            'middle': '#e8f5e8',
            'late': '#fff3e0',
            'very_late': '#fce4ec'
        }
        
        structure_html = f"""
        <div style="padding: 15px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px;">
            <strong>üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</strong><br>
            ‚Ä¢ –¢–∏–ø: <code>{page_type}</code><br>
            ‚Ä¢ Slug: <code>{page_slug or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code><br><br>
            
            <strong>üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ head –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</strong><br><br>
        """
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É head
        structure_html += """
        <div style="background: white; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin: 10px 0; font-family: monospace; font-size: 12px;">
            <div style="color: #666;">&lt;head&gt;</div>
            <div style="margin-left: 20px; color: #333;">&lt;meta charset="UTF-8"&gt;</div>
            <div style="margin-left: 20px; color: #333;">&lt;meta name="viewport" content="..."&gt;</div>
        """
        
        for position_key, scripts in positions.items():
            if scripts:
                color = position_colors[position_key]
                structure_html += f"""
                <div style="margin-left: 20px; background: {color}; padding: 5px; border-radius: 3px; margin: 5px 0;">
                    <div style="font-weight: bold; color: #333;">üìç {position_names[position_key]}</div>
                """
                for script in scripts:
                    structure_html += f"""
                    <div style="margin-left: 10px; color: #666;">
                        ‚Ä¢ {script.name} ({script.get_content_type_display()})
                    </div>
                    """
                structure_html += "</div>"
            else:
                structure_html += f"""
                <div style="margin-left: 20px; color: #ccc; font-style: italic;">
                    üìç {position_names[position_key]} - –ø—É—Å—Ç–æ
                </div>
                """
        
        structure_html += """
            <div style="margin-left: 20px; color: #333;">&lt;link href="bootstrap.css"&gt;</div>
            <div style="margin-left: 20px; color: #333;">&lt;link href="style.css"&gt;</div>
            <div style="color: #666;">&lt;/head&gt;</div>
        </div>
        """
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        structure_html += f"""
            <div style="margin-top: 15px;">
                <a href="{add_script_url}" class="button" style="background: #007cba; color: white; padding: 8px 16px; text-decoration: none; border-radius: 3px; display: inline-block; margin-right: 10px;">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç</a>
                <a href="/admin/main/customheadscript/" class="button" style="background: #6c757d; color: white; padding: 8px 16px; text-decoration: none; border-radius: 3px; display: inline-block;">üìã –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã</a>
            </div>
        </div>
        """
        
        return structure_html
    
    def _get_page_type(self, obj):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(obj, '_meta'):
            model_name = obj._meta.model_name
            if model_name == 'post':
                return 'post_detail'
            elif model_name == 'service':
                return 'service_detail'
            elif model_name == 'portfolioitem':
                return 'portfolio_detail'
            elif model_name == 'city':
                return 'city_detail'
        return 'unknown'
    
    def _get_page_slug(self, obj):
        """–ü–æ–ª—É—á–∞–µ—Ç slug –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(obj, 'slug'):
            return obj.slug
        return None

class SEOPreviewMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ SEO —Å–Ω–∏–ø–ø–µ—Ç–∞"""
    
    def seo_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–Ω–∏–ø–ø–µ—Ç –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ"""
        title = obj.get_seo_title() or obj.title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        description = obj.get_seo_description() or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if len(title) > 60:
            title = title[:57] + "..."
        if len(description) > 160:
            description = description[:157] + "..."
            
        return format_html(
            '<div style="border: 1px solid #ddd; padding: 10px; margin: 5px 0; background: #f9f9f9;">'
            '<div style="color: #1a0dab; font-size: 16px; line-height: 1.3; margin-bottom: 3px;">{}</div>'
            '<div style="color: #006621; font-size: 14px; line-height: 1.3; margin-bottom: 3px;">{}</div>'
            '<div style="color: #545454; font-size: 13px; line-height: 1.4;">{}</div>'
            '</div>',
            title,
            obj.get_absolute_url() if hasattr(obj, 'get_absolute_url') else "#",
            description
        )
    seo_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –ø–æ–∏—Å–∫–µ"

class SEOValidationMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SEO –ø–æ–ª–µ–π"""
    
    def get_queryset(self, request):
        return super().get_queryset(request)
    
    def seo_validation(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö SEO –ø–æ–ª—è—Ö"""
        warnings = []
        
        if not obj.get_seo_title():
            warnings.append("‚ùå –ù–µ—Ç SEO –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        if not obj.get_seo_description():
            warnings.append("‚ùå –ù–µ—Ç SEO –æ–ø–∏—Å–∞–Ω–∏—è")
            
        if warnings:
            return format_html(
                '<div style="color: #d73502; font-size: 12px;">{}</div>',
                "<br>".join(warnings)
            )
        else:
            return format_html('<div style="color: #0f5132;">‚úÖ SEO –≥–æ—Ç–æ–≤–æ</div>')
    seo_validation.short_description = "SEO —Å—Ç–∞—Ç—É—Å"

class CityAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–ì–æ—Ä–æ–¥')
        verbose_name_plural = _('–ì–æ—Ä–æ–¥–∞')
    list_display = (
        'name', 'region', 'order', 'is_active', 
        'seo_validation', 'seo_title_length', 'seo_description_length'
    )
    list_filter = ('is_active', 'region')
    search_fields = ('name', 'region', 'local_title', 'local_description')
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ('order', 'is_active')
    
    fieldsets = (
        ('üèôÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'region', 'order', 'is_active'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ'
        }),
        ('üçû –ù–∞–≤–∏–≥–∞—Ü–∏—è', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
    )
    
    def get_readonly_fields(self, request, obj=None):
        readonly = list(super().get_readonly_fields(request, obj))
        if obj:
            readonly.extend(['seo_preview'])
        return readonly

@admin.register(ServiceCategory)
class ServiceCategoryAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥')
        verbose_name_plural = _('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥')
    list_display = (
        'title', 'order', 'slug', 'get_service_count', 
        'seo_validation', 'seo_title_length', 'seo_description_length'
    )
    prepopulated_fields = {'slug': ('title',)}
    
    fieldsets = (
        ('üìÇ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'order'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥'
        }),
        ('üçû –ù–∞–≤–∏–≥–∞—Ü–∏—è', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
    )

    def get_service_count(self, obj):
        count = obj.services.count()
        if count > 0:
            url = reverse('admin:main_service_changelist') + f'?category__id__exact={obj.id}'
            return format_html('<a href="{}">{} —É—Å–ª—É–≥</a>', url, count)
        return "0 —É—Å–ª—É–≥"
    get_service_count.short_description = '–£—Å–ª—É–≥–∏'

@admin.register(Service)
class ServiceAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–£—Å–ª—É–≥–∞')
        verbose_name_plural = _('–£—Å–ª—É–≥–∏')
    list_display = (
        'title', 'category', 'order', 'slug', 'is_published', 
        'seo_validation', 'seo_title_length', 'seo_description_length'
    )
    list_filter = ('category', 'is_published')
    search_fields = ('title', 'short_description', 'content')
    prepopulated_fields = {'slug': ('title',)}
    list_editable = ('order', 'is_published')
    
    fieldsets = (
        ('üíº –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('category', 'title', 'slug', 'order', 'is_published', 'short_description'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ'
        }),
        ('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image', 'image_alt'),
            'description': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ'
        }),
        ('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ', {
            'fields': ('content',),
            'description': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'
        }),
        ('üçû –ù–∞–≤–∏–≥–∞—Ü–∏—è', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
    )


@admin.register(TeamMember)
class TeamMemberAdmin(admin.ModelAdmin):
    class Meta:
        verbose_name = _('–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã')
        verbose_name_plural = _('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
    list_display = ('name', 'role', 'order', 'is_active', 'photo_preview')
    list_editable = ('order', 'is_active')
    search_fields = ('name', 'role', 'bio')
    list_filter = ('is_active',)
    readonly_fields = ('photo_preview',)
    
    fieldsets = (
        ('üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'role', 'bio', 'order', 'is_active'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã'
        }),
        ('üì∏ –§–æ—Ç–æ', {
            'fields': ('photo', 'photo_alt', 'photo_preview'),
            'description': '–§–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è SEO'
        }),
    )
    
    def photo_preview(self, obj):
        if obj.photo:
            return format_html(
                '<img src="{}" style="max-height: 50px; max-width: 50px; border-radius: 50%;" />',
                obj.photo.url
            )
        return "–ù–µ—Ç —Ñ–æ—Ç–æ"
    photo_preview.short_description = "–§–æ—Ç–æ"

@admin.register(Testimonial)
class TestimonialAdmin(admin.ModelAdmin):
    class Meta:
        verbose_name = _('–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞')
        verbose_name_plural = _('–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤')
    list_display = ('author_name', 'author_title', 'order', 'rating', 'is_active', 'photo_preview')
    list_editable = ('order', 'rating', 'is_active')
    search_fields = ('author_name', 'author_title', 'content')
    list_filter = ('is_active', 'rating')
    readonly_fields = ('photo_preview',)
    
    fieldsets = (
        ('‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('author_name', 'author_title', 'content', 'rating', 'order', 'is_active'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∑—ã–≤–µ'
        }),
        ('üì∏ –ê–≤–∞—Ç–∞—Ä', {
            'fields': ('photo', 'photo_alt', 'photo_preview'),
            'description': '–ê–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è SEO'
        }),
    )
    
    def photo_preview(self, obj):
        if obj.photo:
            return format_html(
                '<img src="{}" style="max-height: 50px; max-width: 50px; border-radius: 50%;" />',
                obj.photo.url
            )
        return "–ù–µ—Ç —Ñ–æ—Ç–æ"
    photo_preview.short_description = "–ê–≤–∞—Ç–∞—Ä"

@admin.register(ContactRequest)
class ContactRequestAdmin(admin.ModelAdmin):
    class Meta:
        verbose_name = _('–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞')
        verbose_name_plural = _('–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞')
    list_display = ('name', 'phone', 'email', 'created_at', 'has_message')
    list_filter = ('created_at',)
    search_fields = ('name', 'phone', 'email', 'message')
    readonly_fields = ('created_at',)
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'phone', 'email'),
            'description': '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞'
        }),
        ('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ', {
            'fields': ('message',),
            'description': '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞'
        }),
        ('üìÖ –í—Ä–µ–º—è', {
            'fields': ('created_at',),
            'classes': ('collapse',),
            'description': '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏'
        }),
    )
    
    def has_message(self, obj):
        return "‚úÖ" if obj.message else "‚ùå"
    has_message.short_description = "–ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"


@admin.register(PortfolioItem)
class PortfolioItemAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–†–∞–±–æ—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
        verbose_name_plural = _('–†–∞–±–æ—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    
    list_display = [
        'title', 'client_name', 'project_type', 'is_published', 
        'is_featured', 'order', 'created_at', 'seo_preview'
    ]
    list_filter = [
        'is_published', 'is_featured', 'project_type', 'created_at'
    ]
    search_fields = ['title', 'client_name', 'short_description']
    list_editable = ['is_published', 'is_featured', 'order']
    readonly_fields = ['created_at', 'updated_at', 'seo_preview', 'seo_validation']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'title', 'slug', 'client_name', 'project_type',
                'short_description', 'full_description'
            )
        }),
        ('–ü–µ—Ä–∏–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞', {
            'fields': (
                'cooperation_start', 'cooperation_end'
            ),
            'description': '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ'
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': (
                'main_image', 'main_image_alt', 'gallery_images'
            ),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏'
        }),
        ('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', {
            'fields': ('results', 'technologies'),
            'description': '–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        }),
        ('–°—Å—ã–ª–∫–∏', {
            'fields': ('project_url',),
            'description': '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∞–π—Ç'
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': (
                'is_published', 'is_featured', 'order',
                'show_breadcrumbs', 'custom_breadcrumbs'
            )
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related()
    
    def get_fieldsets(self, request, obj=None):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º fieldsets –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è SEO —Å–µ–∫—Ü–∏–∏"""
        fieldsets = super().get_fieldsets(request, obj)
        
        # –ù–∞—Ö–æ–¥–∏–º SEO —Å–µ–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ
        updated_fieldsets = []
        for name, options in fieldsets:
            if name == 'SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ SEO —Å–µ–∫—Ü–∏–∏
                updated_options = options.copy()
                updated_options['description'] = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º. SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞.'
                updated_fieldsets.append((name, updated_options))
            else:
                updated_fieldsets.append((name, options))
        
        return updated_fieldsets
    
    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SEO –ø–æ–ª–µ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if not obj.seo_title:
            obj.seo_title = f"{obj.title} - –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ | Isakov Agency"
        if not obj.seo_description:
            obj.seo_description = obj.short_description[:160] if obj.short_description else f"–ü—Ä–æ–µ–∫—Ç {obj.title} –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ Isakov Agency"
            
        super().save_model(request, obj, form, change)


@admin.register(CustomHeadScript)
class CustomHeadScriptAdmin(admin.ModelAdmin):
    class Meta:
        verbose_name = _('–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç')
        verbose_name_plural = _('–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã')
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ HTML-—Ç–µ–≥–æ–≤"""
    
    list_display = (
        'name', 'content_type', 'position', 'page_type', 'page_slug', 
        'is_active', 'order', 'created_at'
    )
    
    list_filter = (
        'content_type', 'position', 'page_type', 'is_active', 'created_at'
    )
    
    search_fields = ('name', 'html_content', 'page_type', 'page_slug')
    
    list_editable = ('is_active', 'order')
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'content_type', 'html_content'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ –∏–ª–∏ HTML-—Ç–µ–≥–µ'
        }),
        ('üìç –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('position',),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –≤ head –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω —Å–∫—Ä–∏–ø—Ç'
        }),
        ('üéØ –£—Å–ª–æ–≤–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('page_type', 'page_slug'),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ, –Ω–∞ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç'
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active', 'order'),
            'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –ø–æ—Ä—è–¥–∫–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        }),
    )
    
    def get_queryset(self, request):
        return super().get_queryset(request).order_by('order', 'name')
    
    def get_form(self, request, obj=None, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        form = super().get_form(request, obj, **kwargs)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if obj is None:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
            page_type = request.GET.get('page_type', '')
            page_slug = request.GET.get('page_slug', '')
            
            # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ URL
            if page_type or page_slug:
                class PrefilledForm(form):
                    def __init__(self, *args, **kwargs):
                        super().__init__(*args, **kwargs)
                        if page_type:
                            self.fields['page_type'].initial = page_type
                        if page_slug:
                            self.fields['page_slug'].initial = page_slug
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                        if page_type and page_slug:
                            self.fields['page_type'].help_text = f"–ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_type} / {page_slug}"
                            self.fields['page_slug'].help_text = f"–ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_type} / {page_slug}"
                
                return PrefilledForm
        
        return form
    
    class Media:
        css = {
            'all': ('admin/css/custom_head_script_admin.css',)
        }
        js = ('admin/js/custom_head_script_admin.js',)


# HomePage —É–±—Ä–∞–Ω–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@admin.register(RegionalPostAdaptation)
class RegionalPostAdaptationAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏')
        verbose_name_plural = _('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π')
    list_display = (
        'post', 'city', 'get_title_preview', 'get_content_preview', 
        'is_active', 'seo_validation', 'seo_title_length', 'seo_description_length', 'created_at'
    )
    list_filter = ('city', 'is_active', 'created_at', 'post__category')
    search_fields = ('post__title', 'title', 'description', 'city__name')
    list_editable = ('is_active',)
    readonly_fields = ('views_count', 'seo_preview', 'created_at', 'updated_at')
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('post', 'city', 'is_active'),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –∏ –≥–æ—Ä–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏'
        }),
        ('üìÑ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ', {
            'fields': ('title', 'content', 'description'),
            'description': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞'
        }),
        ('üçû –ù–∞–≤–∏–≥–∞—Ü–∏—è', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('views_count',),
            'classes': ('collapse',),
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
        }),
        ('üëÅÔ∏è SEO –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', {
            'fields': ('seo_preview',),
            'classes': ('collapse',),
            'description': '–ö–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ'
        }),
        ('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
            'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏'
        }),
    )
    
    def get_title_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title = obj.get_title()
        if len(title) > 50:
            title = title[:50] + "..."
        return title
    get_title_preview.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def get_content_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content = obj.get_content()
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
        import re
        content_text = re.sub(r'<[^>]+>', '', content)
        if len(content_text) > 100:
            content_text = content_text[:100] + "..."
        return content_text
    get_content_preview.short_description = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
        return super().get_queryset(request).select_related('post', 'city')


# --- –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å—ã –¥–ª—è FAQ ---

@admin.register(FAQCategory)
class FAQCategoryAdmin(SEOAdminMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π FAQ"""
    
    list_display = ['name', 'slug', 'order', 'is_active', 'faq_items_count', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['order', 'name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'description', 'order', 'is_active')
        }),
        ('SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('seo_title', 'seo_description', 'seo_keywords'),
            'classes': ('collapse',)
        }),
        ('–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',)
        }),
    )
    
    def faq_items_count(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.faq_items.filter(is_published=True).count()
        if count > 0:
            url = reverse('admin:main_faqitem_changelist') + f'?category__id__exact={obj.id}'
            return format_html('<a href="{}">{} –≤–æ–ø—Ä–æ—Å–æ–≤</a>', url, count)
        return '0 –≤–æ–ø—Ä–æ—Å–æ–≤'
    faq_items_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
        return super().get_queryset(request).prefetch_related('faq_items')


@admin.register(FAQItem)
class FAQItemAdmin(SEOAdminMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤"""
    
    list_display = ['question_short', 'category', 'order', 'is_published', 'views_count', 'created_at']
    list_filter = ['category', 'is_published', 'created_at']
    search_fields = ['question', 'answer']
    ordering = ['order', 'question']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('category', 'question', 'answer', 'order', 'is_published')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('views_count',),
            'classes': ('collapse',)
        }),
        ('SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('seo_title', 'seo_description', 'seo_keywords'),
            'classes': ('collapse',)
        }),
        ('–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',)
        }),
    )
    
    def question_short(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if len(obj.question) > 60:
            return obj.question[:60] + '...'
        return obj.question
    question_short.short_description = '–í–æ–ø—Ä–æ—Å'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
        return super().get_queryset(request).select_related('category')
