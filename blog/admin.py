from django.contrib import admin
from django.utils.translation import gettext_lazy as _
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Category, Post
from seo.admin import SEOAdminMixin
from main.admin_seo import SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin
from main.models import CustomHeadScript
from django.contrib import admin


class CategoryAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞')
        verbose_name_plural = _('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞')
    
    list_display = ('name', 'slug', 'order', 'is_active', 'get_posts_count', 'seo_validation', 'seo_title_length', 'seo_description_length', 'seo_index')
    list_editable = ('order', 'is_active')
    list_filter = ('is_active',)
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    
    fieldsets = (
        (None, {
            'fields': ('name', 'slug', 'description', 'order', 'is_active')
        }),
        ('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥', {
            'fields': ('color',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ'
        }),
        ('–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
    )
    
    def get_readonly_fields(self, request, obj=None):
        readonly = list(super().get_readonly_fields(request, obj))
        if obj:
            readonly.extend(['seo_preview'])
        return readonly

    def get_posts_count(self, obj):
        return obj.post_set.count()
    get_posts_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π'


class PostAdmin(SEOAdminMixin, SEOPreviewMixin, SEOValidationMixin, CustomHeadScriptsMixin, admin.ModelAdmin):
    class Meta:
        verbose_name = _('–°—Ç–∞—Ç—å—è –±–ª–æ–≥–∞')
        verbose_name_plural = _('–°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞')
    
    list_display = (
        'title', 'category', 'published_date', 'is_published', 'views_count', 
        'seo_validation', 'seo_title_length', 'seo_description_length'
    )
    list_filter = ('is_published', 'published_date', 'category')
    search_fields = ('title', 'content', 'author__username')
    prepopulated_fields = {'slug': ('seo_title',)}
    date_hierarchy = 'published_date'
    readonly_fields = ('published_date', 'views_count')
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('slug', 'category', 'blog_author', 'is_published'),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ'
        }),
        ('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ', {
            'fields': ('excerpt', 'content', 'image', 'image_alt'),
            'description': '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        }),
        ('üçû –ù–∞–≤–∏–≥–∞—Ü–∏—è', {
            'fields': ('show_breadcrumbs', 'custom_breadcrumbs'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('views_count',),
            'classes': ('collapse',),
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
        }),
    )
    
    def get_readonly_fields(self, request, obj=None):
        readonly = list(super().get_readonly_fields(request, obj))
        if obj:
            readonly.extend(['seo_preview'])
        return readonly
    
    def get_fieldsets(self, request, obj=None):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º fieldsets –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è SEO —Å–µ–∫—Ü–∏–∏"""
        fieldsets = super().get_fieldsets(request, obj)
        
        # –ù–∞—Ö–æ–¥–∏–º SEO —Å–µ–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ
        updated_fieldsets = []
        for name, options in fieldsets:
            if name == 'SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ SEO —Å–µ–∫—Ü–∏–∏
                updated_options = options.copy()
                updated_options['description'] = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º. SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏.'
                updated_fieldsets.append((name, updated_options))
            else:
                updated_fieldsets.append((name, options))
        
        return updated_fieldsets
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category', 'author')
    
    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SEO –ø–æ–ª–µ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if not obj.seo_title:
            obj.seo_title = "–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è | –ë–ª–æ–≥ | Isakov Agency"
        if not obj.seo_description:
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —É–±–∏—Ä–∞—è HTML —Ç–µ–≥–∏
            import re
            clean_content = re.sub(r'<[^>]+>', '', str(obj.content))
            obj.seo_description = clean_content[:160] if clean_content else "–°—Ç–∞—Ç—å—è –≤ –±–ª–æ–≥–µ Isakov Agency"
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ title –∏–∑ seo_title –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if obj.seo_title and not obj.title:
            obj.title = obj.seo_title.replace(" | –ë–ª–æ–≥ | Isakov Agency", "")
            
        super().save_model(request, obj, form, change)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –∞–¥–º–∏–Ω-—Å–∞–π—Ç–µ
admin.site.register(Category, CategoryAdmin)
admin.site.register(Post, PostAdmin)
